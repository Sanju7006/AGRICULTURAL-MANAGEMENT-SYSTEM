{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kacha\\\\Downloads\\\\Agricultural_Management_System-main (1)\\\\Agricultural_Management_System-main\\\\React FrontEnd\\\\frontend\\\\src\\\\Components\\\\Products.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from 'react';\n// // import { useNavigate } from 'react-router-dom';\n// // import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\n\n// // const ProductList = () => {\n// //   const [products, setProducts] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const navigate = useNavigate();\n\n// //   useEffect(() => {\n// //     console.log('Fetching products...');\n// //     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n// //     fetch('http://localhost:4444/user/product', {\n// //       method: 'GET',\n// //       headers: {\n// //         'Authorization': `${token}`\n// //       }\n// //     })\n// //       .then(response => {\n// //         console.log('Received response:', response);\n// //         if (!response.ok) {\n// //           throw new Error('Network response was not ok');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then(data => {\n// //         console.log('Received data:', data.data);\n// //         setProducts(data.data);\n// //         setLoading(false);\n// //       })\n// //       .catch(error => {\n// //         console.log('Error fetching data:', error);\n// //         setError(error);\n// //         setLoading(false);\n// //       });\n// //   }, []);\n\n// //   const handleAddToCart = (product) => {\n// //     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n// //     const userId = 1; // Replace with actual user_id\n// //     fetch('http://localhost:4444/user/place-order', {\n// //       method: 'POST',\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //         'Authorization': `${token}`\n// //       },\n// //       body: JSON.stringify({ userId, productId: product.product_id }) // Replace with actual user_id\n// //     })\n// //       .then(response => {\n// //         if (!response.ok) {\n// //           throw new Error('Network response was not ok');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then(data => {\n// //         console.log('Product added to cart:', data);\n// //         // Redirect to cart page with selected product details\n// //         navigate('/cart', { state: { selectedProduct: product } });\n// //       })\n// //       .catch(error => {\n// //         console.error('Error adding product to cart:', error);\n// //       });\n// //   };\n\n// //   const handleBuyNow = (product) => {\n// //     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n// //     const userId = 1; // Replace with actual user_id\n// //     const orderDetails = {\n// //       userId,\n// //       total_amount: product.price,\n// //       order_status: 'Pending',\n// //       created_at: new Date().toISOString()\n// //     };\n\n// //     fetch('http://localhost:4444/user/place-orderitems', {\n// //       method: 'POST',\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //         'Authorization': `${token}`\n// //       },\n// //       body: JSON.stringify(orderDetails)\n// //     })\n// //       .then(response => {\n// //         if (!response.ok) {\n// //           throw new Error('Network response was not ok');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then(data => {\n// //         console.log('Order placed:', data);\n// //         const orderId = data.order_id; // Assuming the response contains the order_id\n\n// //         // Place order items\n// //         const orderItems = {\n// //           orderId,\n// //           productId: product.product_id,\n// //           quantity: 1, // Assuming a quantity of 1 for simplicity\n// //           price: product.price\n// //         };\n\n// //         fetch('http://localhost:4444/user/place-orderitems', {\n// //           method: 'POST',\n// //           headers: {\n// //             'Content-Type': 'application/json',\n// //             'Authorization': `${token}`\n// //           },\n// //           body: JSON.stringify(orderItems)\n// //         })\n// //           .then(response => {\n// //             if (!response.ok) {\n// //               throw new Error('Network response was not ok');\n// //             }\n// //             return response.json();\n// //           })\n// //           .then(data => {\n// //             console.log('Order items placed:', data.data);\n// //             // Redirect to order details page with selected product details\n// //             navigate('/OrderDetails', { state: { orderDetails: [orderDetails] } });\n// //           })\n// //           .catch(error => {\n// //             console.error('Error placing order items:', error);\n// //           });\n// //       })\n// //       .catch(error => {\n// //         console.error('Error placing order:', error);\n// //       });\n// //   };\n\n// //   if (loading) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   if (error) {\n// //     return <p>Error: {error.message}</p>;\n// //   }\n\n// //   return (\n// //     <div style={{ backgroundImage: 'url(/images/image3.jpg)', backgroundSize: 'cover', backgroundPosition: 'center', minHeight: '100vh', width: '100%', color: 'white', marginTop: '10px' }}>\n// //       <div className=\"container mt-5\">\n// //         <h1 className=\"text-center mb-4\" style={{ color: 'white' }}>Product List</h1>\n// //         <div className=\"row\">\n// //           {products.map(product => (\n// //             <div className=\"col-md-4 mb-4\" key={product.product_id}>\n// //               <div className=\"card h-100\">\n// //                 <img src={\"http://localhost:3000/images/demo.png\"} className=\"card-img-top\" alt={product.name} />\n// //                 <div className=\"card-body\">\n// //                   <h5 className=\"card-title\">{product.name}</h5>\n// //                   <p className=\"card-text\">Description: {product.description}</p>\n// //                   <p className=\"card-text\">Price: â‚¹{product.price}</p>\n// //                   <p className=\"card-text\">Stock: {product.stock}</p>\n// //                   <p className=\"card-text\">Created At: {new Date(product.created_at).toLocaleDateString()}</p>\n// //                   <div className=\"d-flex justify-content-between\">\n// //                     <button className=\"btn btn-primary\" onClick={() => handleAddToCart(product)}>Add to Cart</button>\n// //                     <button className=\"btn btn-success\" onClick={() => handleBuyNow(product)}>Buy</button>\n// //                   </div>\n// //                 </div>\n// //               </div>\n// //             </div>\n// //           ))}\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ProductList;\n\n// // filepath: /C:/Users/Sakshi Joshi/OneDrive/Desktop/React/pro/Agricultural_Management_System/React FrontEnd/frontend/src/Components/Products.js\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\n\n// const ProductList = () => {\n//   const [products, setProducts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     console.log('Fetching products...');\n//     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n//     fetch('http://localhost:4444/user/product', {\n//       method: 'GET',\n//       headers: {\n//         'Authorization': `${token}`\n//       }\n//     })\n//       .then(response => {\n//         console.log('Received response:', response);\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         console.log('Received data:', data.data);\n//         setProducts(data.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.log('Error fetching data:', error);\n//         setError(error);\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   const handleAddToCart = (product) => {\n//     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n//     const userId = 1; // Replace with actual user_id\n//     fetch('http://localhost:4444/user/place-order', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `${token}`\n//       },\n//       body: JSON.stringify({ userId, productId: product.product_id }) // Replace with actual user_id\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         console.log('Product added to cart:', data);\n//         // Redirect to cart page with selected product details\n//         navigate('/cart', { state: { selectedProduct: product } });\n//       })\n//       .catch(error => {\n//         console.error('Error adding product to cart:', error);\n//       });\n//   };\n\n//   const handleBuyNow = (product) => {\n//     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n//     const userId = 1; // Replace with actual user_id\n//     const orderDetails = {\n//       userId,\n//       total_amount: product.price,\n//       order_status: 'Pending',\n//       created_at: new Date().toISOString()\n//     };\n\n//     fetch('http://localhost:4444/user/place-orderdetails', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `${token}`\n//       },\n//       body: JSON.stringify(orderDetails)\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         console.log('Order placed:', data);\n//         const orderId = data.order_id; // Assuming the response contains the order_id\n\n//         // Redirect to order details page with selected product details\n//         navigate('/OrderDetails', { state: { orderDetails: { ...orderDetails, orderId } } });\n//       })\n//       .catch(error => {\n//         console.error('Error placing order:', error);\n//       });\n//   };\n\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>Error: {error.message}</p>;\n//   }\n\n//   return (\n//     <div style={{ backgroundImage: 'url(/images/image3.jpg)', backgroundSize: 'cover', backgroundPosition: 'center', minHeight: '100vh', width: '100%', color: 'white', marginTop: '10px' }}>\n//       <div className=\"container mt-5\">\n//         <h1 className=\"text-center mb-4\" style={{ color: 'white' }}>Product List</h1>\n//         <div className=\"row\">\n//           {products.map(product => (\n//             <div className=\"col-md-4 mb-4\" key={product.product_id}>\n//               <div className=\"card h-100\">\n//                 <img src={\"http://localhost:3000/images/demo.png\"} className=\"card-img-top\" alt={product.name} />\n//                 <div className=\"card-body\">\n//                   <h5 className=\"card-title\">{product.name}</h5>\n//                   <p className=\"card-text\">Description: {product.description}</p>\n//                   <p className=\"card-text\">Price: â‚¹{product.price}</p>\n//                   <p className=\"card-text\">Stock: {product.stock}</p>\n//                   <p className=\"card-text\">Created At: {new Date(product.created_at).toLocaleDateString()}</p>\n//                   <div className=\"d-flex justify-content-between\">\n//                     <button className=\"btn btn-primary\" onClick={() => handleAddToCart(product)}>Add to Cart</button>\n//                     <button className=\"btn btn-success\" onClick={() => handleBuyNow(product)}>Buy</button>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProductList;\n\n// filepath: /C:/Users/Sakshi Joshi/OneDrive/Desktop/React/pro/Agricultural_Management_System/React FrontEnd/frontend/src/Components/Products.js\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductList = () => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    console.log('Fetching products...');\n    const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n    fetch('http://localhost:4444/user/product', {\n      method: 'GET',\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      console.log('Received response:', response);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      console.log('Received data:', data.data);\n      setProducts(data.data);\n      setLoading(false);\n    }).catch(error => {\n      console.log('Error fetching data:', error);\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  const handleAddToCart = product => {\n    const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n    const userId = 1; // Replace with actual user_id\n    fetch('http://localhost:4444/user/place-order', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `${token}`\n      },\n      body: JSON.stringify({\n        userId,\n        productId: product.product_id\n      }) // Replace with actual user_id\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      console.log('Product added to cart:', data);\n      // Redirect to cart page with selected product details\n      navigate('/cart', {\n        state: {\n          selectedProduct: product\n        }\n      });\n    }).catch(error => {\n      console.error('Error adding product to cart:', error);\n    });\n  };\n  const handleBuyNow = product => {\n    const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n    const userId = 3; // Replace with actual user_id\n    const orderDetails = {\n      userId,\n      total_amount: product.price,\n      order_status: 'Pending',\n      created_at: '2025-02-11T10:35:00+05:30'\n    };\n    console.log('Order Details:', orderDetails); // Log order details for debugging\n    debugger;\n    fetch('http://localhost:4444/user/place-orderdetails', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(orderDetails)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      console.log('Order placed:', data);\n      const orderId = data.order_id; // Assuming the response contains the order_id\n      // Redirect to order details page with selected product details\n      navigate('/OrderDetails');\n    }).catch(error => {\n      console.error('Error placing order:', error);\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundImage: 'url(/images/image3.jpg)',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      minHeight: '100vh',\n      width: '100%',\n      color: 'white',\n      marginTop: '10px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center mb-4\",\n        style: {\n          color: 'white'\n        },\n        children: \"Product List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: products.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card h-100\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              width: 150,\n              height: 150,\n              src: `http://localhost:4444/image/${product.images}`,\n              className: \"card-img-top\",\n              alt: product.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-title\",\n                children: product.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Description: \", product.description]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Price: \\u20B9\", product.price]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Stock: \", product.stock]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Created At: \", new Date(product.created_at).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex justify-content-between\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-primary\",\n                  onClick: () => handleAddToCart(product),\n                  children: \"Add to Cart\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: () => handleBuyNow(product),\n                  children: \"Buy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 446,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this)\n        }, product.product_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 429,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductList, \"CJb0UY+A3HPzF0GksCWDh+2+3zs=\", false, function () {\n  return [useNavigate];\n});\n_c = ProductList;\nexport default ProductList;\nvar _c;\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","ProductList","_s","products","setProducts","loading","setLoading","error","setError","navigate","console","log","token","sessionStorage","getItem","fetch","method","headers","then","response","ok","Error","json","data","catch","handleAddToCart","product","userId","body","JSON","stringify","productId","product_id","state","selectedProduct","handleBuyNow","orderDetails","total_amount","price","order_status","created_at","orderId","order_id","children","fileName","_jsxFileName","lineNumber","columnNumber","message","style","backgroundImage","backgroundSize","backgroundPosition","minHeight","width","color","marginTop","className","map","height","src","images","alt","name","description","stock","Date","toLocaleDateString","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kacha/Downloads/Agricultural_Management_System-main (1)/Agricultural_Management_System-main/React FrontEnd/frontend/src/Components/Products.js"],"sourcesContent":["\n\n// // import React, { useEffect, useState } from 'react';\n// // import { useNavigate } from 'react-router-dom';\n// // import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\n\n// // const ProductList = () => {\n// //   const [products, setProducts] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const navigate = useNavigate();\n\n// //   useEffect(() => {\n// //     console.log('Fetching products...');\n// //     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n// //     fetch('http://localhost:4444/user/product', {\n// //       method: 'GET',\n// //       headers: {\n// //         'Authorization': `${token}`\n// //       }\n// //     })\n// //       .then(response => {\n// //         console.log('Received response:', response);\n// //         if (!response.ok) {\n// //           throw new Error('Network response was not ok');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then(data => {\n// //         console.log('Received data:', data.data);\n// //         setProducts(data.data);\n// //         setLoading(false);\n// //       })\n// //       .catch(error => {\n// //         console.log('Error fetching data:', error);\n// //         setError(error);\n// //         setLoading(false);\n// //       });\n// //   }, []);\n\n// //   const handleAddToCart = (product) => {\n// //     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n// //     const userId = 1; // Replace with actual user_id\n// //     fetch('http://localhost:4444/user/place-order', {\n// //       method: 'POST',\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //         'Authorization': `${token}`\n// //       },\n// //       body: JSON.stringify({ userId, productId: product.product_id }) // Replace with actual user_id\n// //     })\n// //       .then(response => {\n// //         if (!response.ok) {\n// //           throw new Error('Network response was not ok');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then(data => {\n// //         console.log('Product added to cart:', data);\n// //         // Redirect to cart page with selected product details\n// //         navigate('/cart', { state: { selectedProduct: product } });\n// //       })\n// //       .catch(error => {\n// //         console.error('Error adding product to cart:', error);\n// //       });\n// //   };\n\n// //   const handleBuyNow = (product) => {\n// //     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n// //     const userId = 1; // Replace with actual user_id\n// //     const orderDetails = {\n// //       userId,\n// //       total_amount: product.price,\n// //       order_status: 'Pending',\n// //       created_at: new Date().toISOString()\n// //     };\n\n// //     fetch('http://localhost:4444/user/place-orderitems', {\n// //       method: 'POST',\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //         'Authorization': `${token}`\n// //       },\n// //       body: JSON.stringify(orderDetails)\n// //     })\n// //       .then(response => {\n// //         if (!response.ok) {\n// //           throw new Error('Network response was not ok');\n// //         }\n// //         return response.json();\n// //       })\n// //       .then(data => {\n// //         console.log('Order placed:', data);\n// //         const orderId = data.order_id; // Assuming the response contains the order_id\n\n// //         // Place order items\n// //         const orderItems = {\n// //           orderId,\n// //           productId: product.product_id,\n// //           quantity: 1, // Assuming a quantity of 1 for simplicity\n// //           price: product.price\n// //         };\n\n// //         fetch('http://localhost:4444/user/place-orderitems', {\n// //           method: 'POST',\n// //           headers: {\n// //             'Content-Type': 'application/json',\n// //             'Authorization': `${token}`\n// //           },\n// //           body: JSON.stringify(orderItems)\n// //         })\n// //           .then(response => {\n// //             if (!response.ok) {\n// //               throw new Error('Network response was not ok');\n// //             }\n// //             return response.json();\n// //           })\n// //           .then(data => {\n// //             console.log('Order items placed:', data.data);\n// //             // Redirect to order details page with selected product details\n// //             navigate('/OrderDetails', { state: { orderDetails: [orderDetails] } });\n// //           })\n// //           .catch(error => {\n// //             console.error('Error placing order items:', error);\n// //           });\n// //       })\n// //       .catch(error => {\n// //         console.error('Error placing order:', error);\n// //       });\n// //   };\n\n// //   if (loading) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   if (error) {\n// //     return <p>Error: {error.message}</p>;\n// //   }\n\n// //   return (\n// //     <div style={{ backgroundImage: 'url(/images/image3.jpg)', backgroundSize: 'cover', backgroundPosition: 'center', minHeight: '100vh', width: '100%', color: 'white', marginTop: '10px' }}>\n// //       <div className=\"container mt-5\">\n// //         <h1 className=\"text-center mb-4\" style={{ color: 'white' }}>Product List</h1>\n// //         <div className=\"row\">\n// //           {products.map(product => (\n// //             <div className=\"col-md-4 mb-4\" key={product.product_id}>\n// //               <div className=\"card h-100\">\n// //                 <img src={\"http://localhost:3000/images/demo.png\"} className=\"card-img-top\" alt={product.name} />\n// //                 <div className=\"card-body\">\n// //                   <h5 className=\"card-title\">{product.name}</h5>\n// //                   <p className=\"card-text\">Description: {product.description}</p>\n// //                   <p className=\"card-text\">Price: â‚¹{product.price}</p>\n// //                   <p className=\"card-text\">Stock: {product.stock}</p>\n// //                   <p className=\"card-text\">Created At: {new Date(product.created_at).toLocaleDateString()}</p>\n// //                   <div className=\"d-flex justify-content-between\">\n// //                     <button className=\"btn btn-primary\" onClick={() => handleAddToCart(product)}>Add to Cart</button>\n// //                     <button className=\"btn btn-success\" onClick={() => handleBuyNow(product)}>Buy</button>\n// //                   </div>\n// //                 </div>\n// //               </div>\n// //             </div>\n// //           ))}\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ProductList;\n\n\n// // filepath: /C:/Users/Sakshi Joshi/OneDrive/Desktop/React/pro/Agricultural_Management_System/React FrontEnd/frontend/src/Components/Products.js\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\n\n// const ProductList = () => {\n//   const [products, setProducts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     console.log('Fetching products...');\n//     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n//     fetch('http://localhost:4444/user/product', {\n//       method: 'GET',\n//       headers: {\n//         'Authorization': `${token}`\n//       }\n//     })\n//       .then(response => {\n//         console.log('Received response:', response);\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         console.log('Received data:', data.data);\n//         setProducts(data.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.log('Error fetching data:', error);\n//         setError(error);\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   const handleAddToCart = (product) => {\n//     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n//     const userId = 1; // Replace with actual user_id\n//     fetch('http://localhost:4444/user/place-order', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `${token}`\n//       },\n//       body: JSON.stringify({ userId, productId: product.product_id }) // Replace with actual user_id\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         console.log('Product added to cart:', data);\n//         // Redirect to cart page with selected product details\n//         navigate('/cart', { state: { selectedProduct: product } });\n//       })\n//       .catch(error => {\n//         console.error('Error adding product to cart:', error);\n//       });\n//   };\n\n//   const handleBuyNow = (product) => {\n//     const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n//     const userId = 1; // Replace with actual user_id\n//     const orderDetails = {\n//       userId,\n//       total_amount: product.price,\n//       order_status: 'Pending',\n//       created_at: new Date().toISOString()\n//     };\n\n//     fetch('http://localhost:4444/user/place-orderdetails', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `${token}`\n//       },\n//       body: JSON.stringify(orderDetails)\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         console.log('Order placed:', data);\n//         const orderId = data.order_id; // Assuming the response contains the order_id\n\n//         // Redirect to order details page with selected product details\n//         navigate('/OrderDetails', { state: { orderDetails: { ...orderDetails, orderId } } });\n//       })\n//       .catch(error => {\n//         console.error('Error placing order:', error);\n//       });\n//   };\n\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>Error: {error.message}</p>;\n//   }\n\n//   return (\n//     <div style={{ backgroundImage: 'url(/images/image3.jpg)', backgroundSize: 'cover', backgroundPosition: 'center', minHeight: '100vh', width: '100%', color: 'white', marginTop: '10px' }}>\n//       <div className=\"container mt-5\">\n//         <h1 className=\"text-center mb-4\" style={{ color: 'white' }}>Product List</h1>\n//         <div className=\"row\">\n//           {products.map(product => (\n//             <div className=\"col-md-4 mb-4\" key={product.product_id}>\n//               <div className=\"card h-100\">\n//                 <img src={\"http://localhost:3000/images/demo.png\"} className=\"card-img-top\" alt={product.name} />\n//                 <div className=\"card-body\">\n//                   <h5 className=\"card-title\">{product.name}</h5>\n//                   <p className=\"card-text\">Description: {product.description}</p>\n//                   <p className=\"card-text\">Price: â‚¹{product.price}</p>\n//                   <p className=\"card-text\">Stock: {product.stock}</p>\n//                   <p className=\"card-text\">Created At: {new Date(product.created_at).toLocaleDateString()}</p>\n//                   <div className=\"d-flex justify-content-between\">\n//                     <button className=\"btn btn-primary\" onClick={() => handleAddToCart(product)}>Add to Cart</button>\n//                     <button className=\"btn btn-success\" onClick={() => handleBuyNow(product)}>Buy</button>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProductList;\n\n// filepath: /C:/Users/Sakshi Joshi/OneDrive/Desktop/React/pro/Agricultural_Management_System/React FrontEnd/frontend/src/Components/Products.js\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\n\nconst ProductList = () => {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    console.log('Fetching products...');\n    const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n    fetch('http://localhost:4444/user/product', {\n      method: 'GET',\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      }\n    })\n      .then(response => {\n        console.log('Received response:', response);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('Received data:', data.data);\n        \n        setProducts(data.data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.log('Error fetching data:', error);\n        setError(error);\n        setLoading(false);\n      });\n  }, []);\n\n  const handleAddToCart = (product) => {\n    const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n    const userId = 1; // Replace with actual user_id\n    fetch('http://localhost:4444/user/place-order', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `${token}`\n      },\n      body: JSON.stringify({ userId, productId: product.product_id }) // Replace with actual user_id\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('Product added to cart:', data);\n        // Redirect to cart page with selected product details\n        navigate('/cart', { state: { selectedProduct: product } });\n      })\n      .catch(error => {\n        console.error('Error adding product to cart:', error);\n      });\n  };\n\n  const handleBuyNow = (product) => {\n    const token = sessionStorage.getItem('token'); // Replace 'authToken' with your actual token key\n    const userId = 3; // Replace with actual user_id\n    const orderDetails = {\n        userId,\n        total_amount: product.price,\n        order_status: 'Pending',\n        created_at: '2025-02-11T10:35:00+05:30'\n    };\n\n    console.log('Order Details:', orderDetails); // Log order details for debugging\ndebugger;\n    fetch('http://localhost:4444/user/place-orderdetails', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(orderDetails)\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Order placed:', data);\n        const orderId = data.order_id; // Assuming the response contains the order_id\n        // Redirect to order details page with selected product details\n        navigate('/OrderDetails');\n    })\n    .catch(error => {\n        console.error('Error placing order:', error);\n    });\n};\n\n\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {error.message}</p>;\n  }\n\n  return (\n    <div style={{ backgroundImage: 'url(/images/image3.jpg)', backgroundSize: 'cover', backgroundPosition: 'center', minHeight: '100vh', width: '100%', color: 'white', marginTop: '10px' }}>\n      <div className=\"container mt-5\">\n        <h1 className=\"text-center mb-4\" style={{ color: 'white' }}>Product List</h1>\n        <div className=\"row\">\n          {products.map(product => (\n            \n            <div className=\"col-md-4 mb-4\" key={product.product_id}>\n              <div className=\"card h-100\">\n                <img width={150} height={150} src={`http://localhost:4444/image/${product.images}`} className=\"card-img-top\" alt={product.name} />\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">{product.name}</h5>\n                  <p className=\"card-text\">Description: {product.description}</p>\n                  <p className=\"card-text\">Price: â‚¹{product.price}</p>\n                  <p className=\"card-text\">Stock: {product.stock}</p>\n                  <p className=\"card-text\">Created At: {new Date(product.created_at).toLocaleDateString()}</p>\n                  <div className=\"d-flex justify-content-between\">\n                    <button className=\"btn btn-primary\" onClick={() => handleAddToCart(product)}>Add to Cart</button>\n                    <button className=\"btn btn-success\" onClick={() => handleBuyNow(product)}>Buy</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductList;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}